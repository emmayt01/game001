<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Notion Database Bootstrapper</title>
    <style>
        /* Basic Reset */
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
            line-height: 1.6;
            background-color: #f4f4f8;
            color: #333;
            padding: 20px;
        }

        /* Container */
        .app-container {
            max-width: 800px;
            margin: 20px auto;
            background-color: #fff;
            padding: 25px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        h1, h2 {
            color: #2c3e50;
            margin-bottom: 15px;
        }
         h1 {
            text-align: center;
            margin-bottom: 25px;
         }

        /* Input Area */
        .input-area {
            display: flex;
            gap: 10px;
            margin-bottom: 25px;
            flex-wrap: wrap; /* Wrap on smaller screens */
        }

        .input-area label {
             display: block;
             margin-bottom: 5px;
             font-weight: bold;
             flex-basis: 100%; /* Take full width for label */
         }

        .input-area input[type="text"] {
            flex-grow: 1; /* Take available space */
            padding: 10px 12px;
            border: 1px solid #ccc;
            border-radius: 4px;
            font-size: 1rem;
            min-width: 200px; /* Ensure minimum width */
        }

        .input-area button {
            padding: 10px 15px;
            background-color: #3498db;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 1rem;
            transition: background-color 0.2s ease;
        }

        .input-area button:hover {
            background-color: #2980b9;
        }

        /* Schema Editor */
        .schema-editor {
            margin-top: 30px;
            padding-top: 20px;
            border-top: 1px solid #eee;
        }

        .column-list {
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
            margin-bottom: 20px;
            list-style: none; /* Remove default list styles */
            padding-left: 0; /* Remove default padding */
        }

        .column-item {
            background-color: #ecf0f1;
            border: 1px solid #bdc3c7;
            border-radius: 5px;
            padding: 10px 15px;
            min-width: 150px; /* Minimum width for columns */
            position: relative; /* For potential absolute positioning inside */
        }

        .column-item span {
            display: block;
            cursor: pointer;
            padding: 3px 0;
            border-radius: 3px;
            transition: background-color 0.2s ease;
        }
         .column-item span:hover {
             background-color: rgba(0,0,0, 0.05);
         }

        .column-name {
            font-weight: bold;
            margin-bottom: 5px;
            color: #2c3e50;
             word-break: break-word; /* Prevent long names from overflowing */
        }

        .column-type {
            font-size: 0.9em;
            color: #7f8c8d;
            background-color: #fff;
            padding: 2px 6px;
            border-radius: 3px;
            display: inline-block; /* Fit content */
        }

        /* Editing Styles */
        .column-item input[type="text"],
        .column-item select {
            width: calc(100% - 10px); /* Adjust width to fit padding */
            padding: 5px;
            margin: 2px 0;
            border: 1px solid #95a5a6;
            border-radius: 3px;
            font-size: 0.95em;
        }
         .column-item select {
             font-size: 0.9em; /* Match type span size */
             cursor: pointer;
         }


        /* Buttons */
        .action-button {
            padding: 10px 15px;
            background-color: #2ecc71;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 1rem;
            transition: background-color 0.2s ease;
            margin-right: 10px; /* Space between buttons */
            margin-bottom: 10px; /* Space below buttons on wrap */
        }

        .action-button:hover {
            background-color: #27ae60;
        }
        #add-column-btn {
             background-color: #9b59b6;
         }
         #add-column-btn:hover {
             background-color: #8e44ad;
         }


        /* Data Preview */
        .data-preview {
            margin-top: 30px;
            padding-top: 20px;
            border-top: 1px solid #eee;
        }

        .table-container {
            overflow-x: auto; /* Enable horizontal scrolling for table */
            margin-top: 15px;
        }

        #dummy-data-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 0; /* Reset margin as container adds it */
        }

        #dummy-data-table th,
        #dummy-data-table td {
            border: 1px solid #ddd;
            padding: 8px 10px;
            text-align: left;
            font-size: 0.95em;
            vertical-align: top; /* Align content top */
        }

        #dummy-data-table th {
            background-color: #ecf0f1;
            color: #34495e;
            font-weight: bold;
        }

        #dummy-data-table tbody tr:nth-child(even) {
            background-color: #f9f9f9;
        }

        /* Checkbox visual representation */
         .checkbox-display {
             font-size: 1.2em; /* Make checkmark slightly larger */
             text-align: center;
             display: block;
         }

        /* Hidden class */
        .hidden {
            display: none;
        }

        /* Responsive Adjustments */
        @media (max-width: 600px) {
            .app-container {
                padding: 15px;
            }

            .input-area {
                flex-direction: column; /* Stack input and button */
            }

            .input-area input[type="text"],
            .input-area button {
                width: 100%; /* Make input and button full width */
            }

            .column-list {
                gap: 10px;
            }

             .column-item {
                 min-width: 120px; /* Slightly smaller min-width */
                 padding: 8px 10px;
             }

            #dummy-data-table th,
            #dummy-data-table td {
                padding: 6px 8px;
                font-size: 0.9em;
            }
        }

    </style>
</head>
<body>

    <div class="app-container">
        <h1>AI Notion Database Bootstrapper (Simulator)</h1>
        <p>Enter a topic or question (e.g., "track project tasks", "manage my book reading list", "log daily expenses") to simulate how an AI might generate a starting Notion database schema.</p>

        <div class="input-area">
             <label for="topic-input">Your Topic or Question:</label>
            <input type="text" id="topic-input" placeholder="e.g., track my daily habits">
            <button id="generate-schema-btn">Generate Schema</button>
        </div>

        <div id="schema-section" class="hidden">
            <div class="schema-editor">
                <h2>Generated Schema (Editable)</h2>
                <p><small>Click on a column name or type to edit it.</small></p>
                <ul id="column-list" class="column-list">
                    <!-- Columns will be dynamically added here -->
                </ul>
                <button id="add-column-btn" class="action-button">Add Column</button>
            </div>

            <div class="data-preview">
                <h2>Dummy Data Preview</h2>
                <button id="populate-data-btn" class="action-button">Populate with Dummy Data</button>
                <div id="table-container" class="table-container hidden">
                    <table id="dummy-data-table">
                        <thead></thead>
                        <tbody></tbody>
                    </table>
                </div>
                 <p id="data-message" class="hidden"><small>Click "Populate" to see example data based on the current schema.</small></p>
            </div>
        </div>
    </div>

    <script>
        // --- State ---
        let currentSchema = []; // Array of objects: { name: 'Col Name', type: 'Text' }
        const availableTypes = ['Text', 'Number', 'Date', 'Checkbox', 'Select']; // Notion-like types

        // --- DOM Elements ---
        const topicInput = document.getElementById('topic-input');
        const generateBtn = document.getElementById('generate-schema-btn');
        const schemaSection = document.getElementById('schema-section');
        const columnList = document.getElementById('column-list');
        const addColumnBtn = document.getElementById('add-column-btn');
        const populateBtn = document.getElementById('populate-data-btn');
        const tableContainer = document.getElementById('table-container');
        const dataTable = document.getElementById('dummy-data-table');
        const dataMessage = document.getElementById('data-message');

        // --- Event Listeners ---
        generateBtn.addEventListener('click', handleGenerateSchema);
        addColumnBtn.addEventListener('click', handleAddColumn);
        populateBtn.addEventListener('click', handlePopulateData);
        columnList.addEventListener('click', handleColumnClick); // Event delegation for edits

        // --- Functions ---

        function handleGenerateSchema() {
            const topic = topicInput.value.trim().toLowerCase();
            if (!topic) {
                alert("Please enter a topic first.");
                return;
            }

            // ** MOCK AI SCHEMA GENERATION **
            // This is a placeholder simulation. A real AI would use NLP.
            currentSchema = generateMockSchema(topic);

            renderSchema();
            clearDataTable(); // Clear previous data if schema is regenerated
            schemaSection.classList.remove('hidden');
            dataMessage.classList.remove('hidden');
            tableContainer.classList.add('hidden'); // Hide table until populated
        }

        function generateMockSchema(topic) {
            // Simple keyword-based mock generation
            if (topic.includes('habit')) {
                return [
                    { name: 'Habit', type: 'Text' },
                    { name: 'Date', type: 'Date' },
                    { name: 'Completed', type: 'Checkbox' },
                    { name: 'Notes', type: 'Text' }
                ];
            } else if (topic.includes('task') || topic.includes('project')) {
                return [
                    { name: 'Task Name', type: 'Text' },
                    { name: 'Status', type: 'Select' }, // Example for Select type
                    { name: 'Due Date', type: 'Date' },
                    { name: 'Priority', type: 'Number' },
                    { name: 'Assignee', type: 'Text' } // Placeholder for 'Person'
                ];
            } else if (topic.includes('book') || topic.includes('reading')) {
                return [
                    { name: 'Title', type: 'Text' },
                    { name: 'Author', type: 'Text' },
                    { name: 'Status', type: 'Select' },
                    { name: 'Rating (1-5)', type: 'Number' },
                    { name: 'Date Finished', type: 'Date' }
                ];
            } else if (topic.includes('expense') || topic.includes('budget') || topic.includes('money')) {
                 return [
                    { name: 'Item', type: 'Text' },
                    { name: 'Category', type: 'Select' },
                    { name: 'Amount', type: 'Number' },
                    { name: 'Date', type: 'Date' },
                    { name: 'Receipt', type: 'Checkbox' } // Placeholder for 'Files & Media'
                ];
            } else {
                // Generic fallback
                return [
                    { name: 'Name', type: 'Text' },
                    { name: 'Date Created', type: 'Date' },
                    { name: 'Value', type: 'Number' },
                    { name: 'Description', type: 'Text' }
                ];
            }
        }

        function renderSchema() {
            columnList.innerHTML = ''; // Clear existing columns
            currentSchema.forEach((col, index) => {
                const listItem = document.createElement('li');
                listItem.classList.add('column-item');
                listItem.dataset.index = index; // Store index for editing

                const nameSpan = document.createElement('span');
                nameSpan.classList.add('column-name');
                nameSpan.textContent = col.name;
                nameSpan.dataset.field = 'name'; // Identify field for editing

                const typeSpan = document.createElement('span');
                typeSpan.classList.add('column-type');
                typeSpan.textContent = col.type;
                typeSpan.dataset.field = 'type'; // Identify field for editing

                listItem.appendChild(nameSpan);
                listItem.appendChild(typeSpan);
                columnList.appendChild(listItem);
            });
        }

        function handleAddColumn() {
            // Add a default new column
            const newColName = `New Column ${currentSchema.length + 1}`;
            currentSchema.push({ name: newColName, type: 'Text' });
            renderSchema();
            clearDataTable(); // Clear data as schema changed
        }

        function handleColumnClick(event) {
            const target = event.target;
            const columnItem = target.closest('.column-item');

            if (!columnItem || !(target.dataset.field === 'name' || target.dataset.field === 'type')) {
                return; // Clicked outside an editable area
            }

            const index = parseInt(columnItem.dataset.index);
            const field = target.dataset.field; // 'name' or 'type'
            const currentValue = currentSchema[index][field];

            // Prevent multiple edits at once by checking if already editing
             if (target.tagName === 'SPAN') {
                 enableEditMode(target, index, field, currentValue);
             }
        }

        function enableEditMode(targetSpan, index, field, currentValue) {
            let inputElement;

            if (field === 'name') {
                inputElement = document.createElement('input');
                inputElement.type = 'text';
                inputElement.value = currentValue;
            } else { // field === 'type'
                inputElement = document.createElement('select');
                availableTypes.forEach(type => {
                    const option = document.createElement('option');
                    option.value = type;
                    option.textContent = type;
                    if (type === currentValue) {
                        option.selected = true;
                    }
                    inputElement.appendChild(option);
                });
            }

            // Replace span with input/select
            targetSpan.replaceWith(inputElement);
            inputElement.focus(); // Focus the new input/select

            // Event listeners to save/cancel edit
            inputElement.addEventListener('blur', () => saveEdit(inputElement, index, field), { once: true }); // Save on losing focus
            inputElement.addEventListener('keydown', (e) => {
                if (e.key === 'Enter') {
                    inputElement.blur(); // Trigger blur to save
                } else if (e.key === 'Escape') {
                    // Cancel edit: Re-render the specific column or the whole schema
                    renderSchema(); // Simple way to cancel: re-render everything
                }
            });
        }

        function saveEdit(inputElement, index, field) {
            const newValue = inputElement.value.trim();

            if (field === 'name' && !newValue) {
                alert("Column name cannot be empty.");
                renderSchema(); // Re-render to restore original or previous state
                return;
            }

            // Update the schema state
            currentSchema[index][field] = newValue;

            // Re-render the schema to show the updated value and remove the input
            renderSchema();
            clearDataTable(); // Clear data as schema changed
        }


        function handlePopulateData() {
            if (currentSchema.length === 0) {
                alert("Please generate or add columns to the schema first.");
                return;
            }
            const dummyData = generateDummyData(currentSchema);
            renderDataTable(dummyData);
            tableContainer.classList.remove('hidden');
            dataMessage.classList.add('hidden');
        }

        function generateDummyData(schema) {
            const data = [];
            const rowCount = 3; // Generate 3 rows

            for (let i = 0; i < rowCount; i++) {
                const row = {};
                schema.forEach((col, colIndex) => {
                    row[col.name] = generateSingleDummyValue(col.type, i, colIndex);
                });
                data.push(row);
            }
            return data;
        }

        function generateSingleDummyValue(type, rowIndex, colIndex) {
            const baseIndex = rowIndex + 1;
            switch (type) {
                case 'Number':
                    return Math.floor(Math.random() * 100) + baseIndex;
                case 'Date':
                    const d = new Date();
                    d.setDate(d.getDate() + rowIndex - colIndex); // Vary dates slightly
                    return d.toISOString().split('T')[0]; // Format as YYYY-MM-DD
                case 'Checkbox':
                    return Math.random() < 0.5; // Random true/false
                case 'Select':
                    const options = ['Option A', 'Option B', 'Option C'];
                    return options[Math.floor(Math.random() * options.length)];
                case 'Text':
                default:
                     // Generate slightly more varied text
                     const textSamples = [
                         `Sample item ${baseIndex}`,
                         `Entry ${baseIndex}-${colIndex+1}`,
                         `Placeholder data`,
                         `Example value ${baseIndex}`,
                         `Row ${baseIndex} text`
                     ];
                    return textSamples[Math.floor(Math.random() * textSamples.length)];
            }
        }

        function renderDataTable(data) {
            const thead = dataTable.querySelector('thead');
            const tbody = dataTable.querySelector('tbody');

            // Clear previous table content
            thead.innerHTML = '';
            tbody.innerHTML = '';

            if (currentSchema.length === 0 || data.length === 0) {
                tableContainer.classList.add('hidden');
                dataMessage.classList.remove('hidden');
                return;
            }


            // Create header row
            const headerRow = document.createElement('tr');
            currentSchema.forEach(col => {
                const th = document.createElement('th');
                th.textContent = col.name;
                headerRow.appendChild(th);
            });
            thead.appendChild(headerRow);

            // Create data rows
            data.forEach(rowData => {
                const tr = document.createElement('tr');
                currentSchema.forEach(col => {
                    const td = document.createElement('td');
                    const value = rowData[col.name];

                    // Special handling for checkbox display
                    if (col.type === 'Checkbox') {
                         const checkboxSpan = document.createElement('span');
                         checkboxSpan.classList.add('checkbox-display');
                         checkboxSpan.textContent = value ? '✅' : '⬜️'; // Or use actual checkbox icons/elements
                         td.appendChild(checkboxSpan);
                         td.style.textAlign = 'center'; // Center checkbox
                    } else {
                         td.textContent = value !== undefined && value !== null ? value : ''; // Handle undefined/null
                    }
                    tr.appendChild(td);
                });
                tbody.appendChild(tr);
            });

             tableContainer.classList.remove('hidden');
             dataMessage.classList.add('hidden');
        }

        function clearDataTable() {
             const thead = dataTable.querySelector('thead');
             const tbody = dataTable.querySelector('tbody');
             thead.innerHTML = '';
             tbody.innerHTML = '';
             tableContainer.classList.add('hidden');
             if (currentSchema.length > 0) { // Only show message if there's a schema but no data displayed
                 dataMessage.classList.remove('hidden');
             }
        }

        // --- Initial State ---
        // (No actions needed on load, everything is hidden until generation)

    </script>

</body>
</html>
